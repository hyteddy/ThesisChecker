<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
       	xmlns:mvc="http://www.springframework.org/schema/mvc"
       	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       	xmlns:p="http://www.springframework.org/schema/p"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:tx="http://www.springframework.org/schema/tx"
       	xmlns:context="http://www.springframework.org/schema/context"
       	xsi:schemaLocation="http://www.springframework.org/schema/aop
							http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
							http://www.springframework.org/schema/beans
							http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd
							http://www.springframework.org/schema/jee
							http://www.springframework.org/schema/jee/spring-jee.xsd
							http://www.springframework.org/schema/mvc
							http://www.springframework.org/schema/mvc/spring-mvc.xsd
							http://www.springframework.org/schema/tx
							http://www.springframework.org/schema/tx/spring-tx.xsd
							http://www.springframework.org/schema/context
							http://www.springframework.org/schema/context/spring-context.xsd">

	    <context:component-scan base-package="com.thesischecker.*"/>
	
	    <mvc:annotation-driven />
	    <mvc:default-servlet-handler default-servlet-name="appServlet" />
	
		<mvc:resources location="/resources/" mapping="/resources/**"/>
	
		<tx:annotation-driven proxy-target-class="true" />
		<tx:jta-transaction-manager />
		
	    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	        <property name="prefix" value="/WEB-INF/jsp/" />
	        <property name="suffix" value=".jsp" />
	    </bean>

        <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>
	    
	    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	        <property name="locations">
	            <list>
	                <value>classpath:database.properties</value>
	            </list>
	        </property>
	    </bean>
	    
	    <bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
			<property name="uniqueResourceName">
				<value>DataSource</value></property>
			<property name="xaDataSourceClassName">
				<value>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</value>
			</property>
			<property name="xaProperties">
			    <props>
				<prop key="databaseName">${jdbc.databaseName}</prop>
				<prop key="serverName">${jdbc.serverName}</prop>
				<prop key="port">${jdbc.port}</prop>
				<prop key="user">${jdbc.user}</prop>
				<prop key="password">${jdbc.password}</prop>
				<prop key="url">${jdbc.url}</prop>
			    </props>
			</property>
			<property name="minPoolSize">
				<value>1</value>
			</property>
		</bean>
	    
	    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
			<property name="persistenceXmlLocation">
		            <value>classpath*:persistence.xml</value>
		    </property>
				<property name="persistenceUnitName" value="PersistenceUnitResources" />
				<property name="dataSource" ref="dataSource" />
				<property name="jpaVendorAdapter">
					<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
						<property name="showSql" value="true" />
						<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
					</bean>
				</property>
		</bean>
	
		<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
			<property name="forceShutdown" value="false" />
		</bean>
	
		<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.J2eeUserTransaction">
			<property name="transactionTimeout" value="300" />
		</bean>
	
		<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"
			depends-on="atomikosTransactionManager,atomikosUserTransaction">
			<property name="transactionManager" ref="atomikosTransactionManager" />
			<property name="userTransaction" ref="atomikosUserTransaction" />
			<property name="allowCustomIsolationLevels" value="true" />
		</bean>

    <!-- APACHE SHITO -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/" />
        <property name="unauthorizedUrl" value="/" />
        <!-- override these for application-specific URLs if you like:
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <value>
                /resources/bootstrap/** = anon
                /resources/css/** = anon
                /resources/images/** = anon
                /resources/js/** = anon
                /resources/** = authc, user
                /admin/**   =   authc, roles[ROLE_ADMIN]
<!--                # some example chain definitions:
                /admin/** = authc, roles[admin]
                /docs/** = authc, perms[document:read]
                /** = authc
                # more URL-to-FilterChain definitions here-->
            </value>
        </property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>
    <bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager">
        <!--property name="cacheManager" ref="ehCacheManager" /-->
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="com.thesischecker.auth.AuthenticationRealm">
        <property name="credentialsMatcher" ref="myCreditentialMatcher"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="permissionsLookupEnabled" value="false"/>
        <property name="userRolesQuery" value="select role from user where email = ?"/>
    </bean>

    <bean id="myCreditentialMatcher" class="com.thesischecker.auth.AuthCreditentialMatcher" />
    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
</beans>
